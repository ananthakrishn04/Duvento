# Generated by Django 5.1.5 on 2025-05-17 06:56

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('CodingGrounds', '0004_remove_codingprofile_codinggroun_usernam_ffe44a_idx_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('max_participants', models.IntegerField(default=8, help_text='Must be a power of 2 (e.g. 4, 8, 16)')),
                ('is_private', models.BooleanField(default=False)),
                ('access_code', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('registration', 'Registration Open'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='registration', max_length=20)),
                ('format', models.CharField(choices=[('knockout', 'Single Elimination'), ('double_elim', 'Double Elimination'), ('round_robin', 'Round Robin')], default='knockout', max_length=20)),
                ('session_duration', models.IntegerField(default=15, help_text='Duration in minutes for each match')),
                ('current_round', models.IntegerField(default=1)),
                ('total_rounds', models.IntegerField(default=3)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_leagues', to='CodingGrounds.codingprofile')),
                ('problems', models.ManyToManyField(blank=True, related_name='league_problems', to='CodingGrounds.codingproblem')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LeagueParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('final_rank', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(default=0)),
                ('is_admin', models.BooleanField(default=False, help_text='Can edit league settings')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to='CodingGrounds.league')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_participations', to='CodingGrounds.codingprofile')),
            ],
        ),
        migrations.AddField(
            model_name='league',
            name='participants',
            field=models.ManyToManyField(related_name='participating_leagues', through='CodingGrounds.LeagueParticipation', to='CodingGrounds.codingprofile'),
        ),
        migrations.CreateModel(
            name='LeagueMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField(default=1)),
                ('match_number', models.IntegerField(default=1)),
                ('scheduled_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('game_session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='league_match', to='CodingGrounds.gamesession')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='CodingGrounds.league')),
                ('participant1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_matches_as_participant1', to='CodingGrounds.codingprofile')),
                ('participant2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_matches_as_participant2', to='CodingGrounds.codingprofile')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='league_matches_won', to='CodingGrounds.codingprofile')),
            ],
            options={
                'ordering': ['league', 'round_number', 'match_number'],
                'indexes': [models.Index(fields=['league', 'round_number'], name='CodingGroun_league__355b36_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='leagueparticipation',
            index=models.Index(fields=['league', '-score'], name='CodingGroun_league__ebdd5d_idx'),
        ),
        migrations.AddIndex(
            model_name='leagueparticipation',
            index=models.Index(fields=['league', 'final_rank'], name='CodingGroun_league__081a4d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='leagueparticipation',
            unique_together={('league', 'profile')},
        ),
        migrations.AddIndex(
            model_name='league',
            index=models.Index(fields=['-created_at'], name='CodingGroun_created_cd6fac_idx'),
        ),
        migrations.AddIndex(
            model_name='league',
            index=models.Index(fields=['is_active'], name='CodingGroun_is_acti_4515eb_idx'),
        ),
        migrations.AddIndex(
            model_name='league',
            index=models.Index(fields=['status'], name='CodingGroun_status_462aea_idx'),
        ),
    ]
